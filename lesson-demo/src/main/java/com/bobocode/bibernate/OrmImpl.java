package com.bobocode.bibernate;

import com.bobocode.bibernate.annotation.Column;
import com.bobocode.bibernate.annotation.Entity;
import com.bobocode.bibernate.annotation.Id;
import com.bobocode.bibernate.annotation.Table;
import com.google.common.base.CaseFormat;
import lombok.RequiredArgsConstructor;
import lombok.SneakyThrows;
import org.postgresql.ds.PGSimpleDataSource;

import javax.sql.DataSource;
import java.lang.reflect.Field;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.Optional;

@RequiredArgsConstructor
public class OrmImpl implements Orm {
    public static final String SELECT_FROM_TABLE_BY_COLUMN = "select * from %s where %s = ?";
    private final DataSource dataSource;

    public OrmImpl(String jdbcUrl, String username, String password) {
        var pgSimpleDataSource = new PGSimpleDataSource();
        pgSimpleDataSource.setURL(jdbcUrl);
        pgSimpleDataSource.setUser(username);
        pgSimpleDataSource.setPassword(password);
        this.dataSource = pgSimpleDataSource;
    }

    @Override
    @SneakyThrows
    public <T> T findById(Class<T> entityType, Object id) {
        verifyEntity(entityType);
        try (var connection = dataSource.getConnection()) {
            var selectSql = buildSqlSelectById(entityType);
            System.out.println("SQL: " + selectSql);
            try (var selectStatement = connection.prepareStatement(selectSql)) {
                selectStatement.setObject(1, id);
                var rs = selectStatement.executeQuery();
                if (rs.next()) {
                    return createEntityFromResultSet(entityType, rs);
                } else {
                    throw new RuntimeException("Entity not found by id =" + id);
                }
            }

        }
    }

    private void verifyEntity(Class<?> entityType) {
        if (!entityType.isAnnotationPresent(Entity.class)) {
            throw new RuntimeException(entityType.getSimpleName() + " is not an @Entity");
        }
    }

    private String buildSqlSelectById(Class<?> entityType) {
        var tableName = resolveTableName(entityType);
        var idColumnName = resolveIdColumnName(entityType);
        return SELECT_FROM_TABLE_BY_COLUMN.formatted(tableName, idColumnName);
    }

    private String resolveTableName(Class<?> entityType) {
        return Optional.ofNullable(entityType.getAnnotation(Table.class))
                .map(Table::value)
                .orElseGet(() -> underscore(entityType.getSimpleName()));
    }

    private String resolveIdColumnName(Class<?> entityType) {
        return Arrays.stream(entityType.getDeclaredFields())
                .filter(field -> field.isAnnotationPresent(Id.class))
                .findAny()
                .map(this::resolveColumnName)
                .orElseThrow(() -> new RuntimeException("Entity " + entityType.getSimpleName() + " must have an @Id"));
    }

    private String resolveColumnName(Field field) {
        return Optional.ofNullable(field.getAnnotation(Column.class))
                .map(Column::value)
                .orElseGet(() -> underscore(field.getName()));
    }

    private String underscore(String value) {
        return CaseFormat.LOWER_CAMEL
                .converterTo(CaseFormat.LOWER_UNDERSCORE)
                .convert(value);
    }

    @SneakyThrows
    private <T> T createEntityFromResultSet(Class<T> entityType, ResultSet rs) {
        var entity = entityType.getConstructor().newInstance();
        for (var field : entityType.getDeclaredFields()) {
            var columnName = resolveColumnName(field);
            var fieldValue = rs.getObject(columnName);
            if (fieldValue instanceof Timestamp timestamp) {
                fieldValue = timestamp.toLocalDateTime();
            }
            field.setAccessible(true);
            field.set(entity, fieldValue);
        }
        return entity;
    }

    /**
     * Saves the given entity by persisting it in the database and sets the id value which is generated by the DB.
     *
     * @param entity the entity to be saved
     * @throws RuntimeException if the method is not implemented
     */
    @Override
    public void save(Object entity) {
        throw new UnsupportedOperationException("Method save() is not implemented yet"); // todo: implement this method and remove the exception  
    }
}
